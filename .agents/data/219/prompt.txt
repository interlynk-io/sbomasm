Deep-dive on this GitHub issue. Find the problem and generate a plan.
Do not write code. Explain the problem clearly and propose a comprehensive plan
to solve it.

# Feature: Add components and dependency relationships to an existing SBOM (219)

## Description
Some tool-generated SBOMs may be missing information about components or dependency relationships.
In such cases, is it possible to use sbomasm’s assemble command to merge a delta SBOM into an existing SBOM to augment it?

Here is a minimal example of what I want to do.

Suppose we have sbom-1 as follows:

sbom-1 with primary component P1; its components are C1, C2, C3; and its component dependencies are:
P1 CONTAINS C1, P1 DEPENDS_ON C2, P1 DEPENDS_ON C3.

I would like to add component C4 and the relationships C1 CONTAINS C4, C4 DEPENDS_ON C3, to make it as follows:

sbom-3 with primary component P1; its components are C1, C2, C3, C4; and its component dependencies are:
P1 CONTAINS C1, P1 DEPENDS_ON C2, P1 DEPENDS_ON C3, C1 CONTAINS C4, C4 DEPENDS_ON C3.

To achieve this, I want to create sbom-2 and merge sbom-1 and sbom-2 to produce sbom-3, as follows:

sbom-2 with its components C1, C2, C4; and its component dependencies:
C1 CONTAINS C4, C4 DEPENDS_ON C3.

When I run the following command with the latest sbomasm (v1.0.7), I get the attached sbom-4.json.
The intended components and relationships are added, but a new RootPackage (named P2) is introduced.
```bash
sbomasm assemble -c config.yaml sbom-1.json sbom-2.json -o sbom-4.json
```
This happens because it is necessary to specify a RootPackage (app:) in config.yaml. If the RootPackage (app:) is not configured, an error occurs; and if I set P1 as the RootPackage (app:), then a duplicate component with the name P1 is created.

**Question**
Is there any way to perform the merge without adding a new RootPackage?
I understand that a primary-selection option like --primaryCompFile, which was discussed in #128 and #134, is not implemented at this time, and therefore the following command cannot be executed:
```bash
sbomasm --primaryCompFile sbom-1.json sbom-2.json -o sbom-3.json
```

<img width="807" height="436" alt="Image" src="https://github.com/user-attachments/assets/27816404-2db2-4bf2-844a-a77c244367db" />


[sbom-1.json (base)](https://github.com/user-attachments/files/22134157/sbom-1.json)
[sbom-2.json(complement)](https://github.com/user-attachments/files/22134155/sbom-2.json)
[sbom-3.json(expected)](https://github.com/user-attachments/files/22134158/sbom-3.json)
[sbom-4.json(actual)](https://github.com/user-attachments/files/22134156/sbom-4.json)
[config.yaml](https://github.com/user-attachments/files/22134171/config.yaml)

## Comments
### Comment by (viveksahu26)

  Hey @ToyaHirotaka , thanks for raising it. It looks like an interesting case, where you want to skip the primary component explicity irrespective of whether SBOM have pc or not. Like, all the rest of SBOMs that we are merging to our main SBOM, should skips their PC, and add it as it is. This diagram would give bit of visualization, if you ignore or skip to add P2, P3.
https://github.com/viveksahu26/sbomasm/blob/feat/assemble_via_pc_file/docs/assemble/README.md#flat-merge

### Comment by (ToyaHirotaka)

Thanks, @viveksahu26 — the diagram and the “flat-merge” idea help. My goal is to keep `P1` as the only primary/root component and just add `C4` plus the edges `C1 CONTAINS C4` and `C4 DEPENDS_ON C3`, without introducing a new root from the delta SBOM or from configuration file. Can the current **assemble mode** skip the primary component from secondary SBOMs/configuration while preserving the associated dependency links? If it can, could you please share the specific steps and configuration settings to achieve it? Thanks again for your guidance and consideration!

### Comment by (riteshnoronha)

Thanks @ToyaHirotaka  for opening this issue—this is a really valuable request. We’d love to add an **augment** capability in sbomasm that lets you merge a delta SBOM into an existing one **without creating a new RootPackage**.

Right now there isn’t a way to do this in the current setup, but we’re planning to add support in the next release (roughly a sprint away).

### Proposed approach to augmentation

**Purl / CPE / Name-Version based linking**

```bash
sbomasm assemble --primary-sbom sbom-1.json --method purl --id 'pkg_url_for_component' sbom-2.json
```

This would make it possible to attach an additional SBOM to a specific component in your primary SBOM—for example, augmenting with a 3rd-party supplied SBOM.

### Example walkthrough

* **sbom-1.json** defines `P1` as the root, with components `C1`, `C2`, `C3`.
* **sbom-2.json** is a delta SBOM for `C3`, describing its internal dependency `C4`.

Running:

```bash
sbomasm assemble --primary-sbom sbom-1.json --method purl --id 'pkg:purl_for_C3' sbom-2.json -o sbom-3.json
```

Would produce **sbom-3.json** with:

* Root component still `P1` (no new root introduced).
* Components `C1`, `C2`, `C3` preserved.
* New component `C4` added, with the correct relationship under `C3`.

So instead of duplicating or introducing a new root, the delta SBOM is neatly folded into the original.

We think this covers your scenario, but we’d love to hear if you have other augmentation use cases in mind. Your input will help us shape the feature while we build it.


### Comment by (ToyaHirotaka)

Thanks @riteshnoronha for the detailed plan — it looks very promising and fits my use case perfectly.
One concern is that in practice, missing or incorrect information often spans multiple components. If I need to prepare a separate delta SBOM for each component and run --id <purl> <delta> repeatedly, it becomes operationally heavy.
It would be extremely helpful if multiple components could be augmented in a single run (for example, by providing a configuration file such as YAML that accepts multiple --id/--delta pairs).
Another important use case is the ability to fill in missing metadata for existing components or override incorrect metadata. Similar use cases also exist in CycloneDX.
By the way, could you share when the next release that includes this feature is planned?
Thank you very much for moving this feature forward!

## Your Tasks

You are an experienced software developer tasked with diagnosing issues.

1. Review the issue context and details.
2. Examine the relevant parts of the codebase. Analyze the code thoroughly
   until you have a solid understanding of how it works.
3. Explain the issue in detail, including the problem and its root cause.
4. Create a comprehensive plan to solve the issue. The plan should include:
   - Required code changes
   - Potential impacts on other parts of the system
   - Necessary tests to be written or updated
   - Documentation updates
   - Performance considerations
   - Security implications
   - Backwards compatibility (if applicable)
   - Include the reference link to the source issue and any related discussions
5. Think deeply about all aspects of the task. Consider edge cases, potential
   challenges, and best practices for addressing the issue. Review the plan
   with the oracle and adjust it based on its feedback.
6. **IMPORTANT**: Write your final plan to the file: .agents/data/219/plan.md

**ONLY CREATE A PLAN. DO NOT WRITE ANY CODE.** Your task is to create
a thorough, comprehensive strategy for understanding and resolving the issue.

Source: https://github.com/interlynk-io/sbomasm/issues/219
